Comandos Git

1 arquivo 

git init 
git status
git add "meu codigo.txt"
git status

2 arquivos ou mais 
git status
git add .
git status 

Commit
CRIAR AS VERSÕES DO CÓDIGO COM COMMIT

git commit -m "commit inicial" a mensagem dentro por boa pratica deve ser o que vai representar o que foi feito naquela versão / versão inicial geralmente é chamada de "commit inicial"


Enviar arquivos para o repositório na nuvem dentro do git hub 

git remote add origin https://github.com/JorgeCzr/projeto1-jhonatan-devaprender/commits/main         ----- link é do git hub
Definir para onde o codigo sera enviado de fato 

git push
para que esse código seja enviado de fato 

definir qual Branch o código devera ser enviado , inicialmente sempre é enviado para master


Depois que a primeira versão do código fo criada....
Ciclo de atualização de código

QUANDO UM CÓDIGO FOR ALTERADO,NOVA VERSÃO:
git add . / git status / git commit -m "colocar um novo nome relacionado a alteração" / git push


COMO VERIFICAR HISTÓRICO DE ATUALIZAÇÕES / VERSÕES:
git reflog



VOLTAR VERSÕES:

Versão antiga
git reset --hard c3a6cba  
confirma abrindo o arquivo e o código é alterado para versão desejada,versão anterior

obs: c3a6cba esse código representa a versão..

Versão atual
git reflog / escolha a versão desejada
git reset --hard dca7f19      passa o id
confirma abrindo o arquivo e o código é alterado para versão desejada,versão anterior


O QUE SÃO BRANCHES E COMO CRIAR UMA:

git branch     serve para verificar quantas branchs eu tenho disponivel
git branch standing    obs: standing é apenas um nome dado a ramificações por boa pratica de mercado

Após serem criadas quando verifico as branchs uma delas estara com * e pintada de verde , isso significa que estou trabalhando com aquela branch,
caso precise alterar para alguma ramificação dou o seguinte comando:

git checkout standing     obs standing nesse caso é o nome da branch criada no exemplo acima para que ela seja selecionada e para confirmar rode o seguinte comando:
git branch

Após rodar esse comando vou perceber que a branch (standing) que foi selecionada vai ficar com o * e pintada de verde



O branch é a solução perfeita, pois cria uma ramificação do código principal para que seja possível fazer alterações sem nenhum tipo de problema. É importante ressaltar que uma ramificação não depende da outra para ser desenvolvida.

Obs: A Branch master é a principal quando ela é criada , apartir dela pode se criar ramificações ex: A,B,C supondo que a (B) seja a Branch master e nela sejam enviadas as versões 
que são alterações no código ou até mesmo correções de bugs,quando se trabalha com equipes geralmente se tem a necesidade de trabalhar com outras branchs para que se mantenham a branch principal estavel e nela sera colocada apenas códigos que funcionam.
as Branchs paralelas no caso A e C somente quando estiver a certeza que os códigos estão funcionando serão passadas para Branch B a principal , isso se chama MERGE
obs: quando estou trabalhando pra mim mesmo e não vou subir para produção,quando meu código não sera exposto uma branch já resolve.


O QUE É MERGE BRANCH NO GIT?
Git merge é o comando que unifica algum histórico bifurcado. Resumindo, o Git merge permite que você pegue as linhas criadas a partir do Git branch e faça uma integração para a ramificação principal.

GIT MERGE COMO UNUIR O CÓDIGO:

Aviso:Antes de fazer o merge por boa pratica para evitar que seja feita em uma versão desatualizada entre na branch principal,ou seja o código mais atual e rode o seguinte comando:
git pull

ele vai trazer as atualizações do servidor para a maquina local 

Entro na branch principal (master) para onde vai as novas linhas de códigos e digito os seguints comandos:

git merge standing    obs: nesse caso o standing é a branch que foi alterado o código que é da onde estarei puchando as informações para master atual
git push


SEQUENCIA:
1. git pull da branch principal
2.gerar uma nova branch apartir da branch principal
3.trabalhar e adicionar novas funcionalidades na nova branch que criou 
4.finalizar o trabalho na branch temporária
5.git checkout na branch principal
6.git pull
7.mergiar(unir) o código da branch temporária com a branch principal, depois testar
8.git push da branch principal


USAR UMA BRANCH COMO BASE PARA CRIAR UMA NOVA BRANCH:

git branch - Obs: verifico que estou realmente na master
git pull - Obs: verifico que estou realmente no código mais atual atualizando
git checkout -b sistema-de-login master - Obs: neste caso eu coloco o "master" no final do nome para gerar uma nova branch baseada na master
git branch - confirmar a criação - obs: crie um novo arquivo na maquina local ex: (sistema de login.txt)
git commit -m "criado sistema de login" - obs: comando para confirmar estas alterações 
git checkout master - obs : voltar para master
git pull - obs: atualiza o código da master pois sempre tenho que estar no código mais atual e nunca um desatualizado para fazer o merge
git merge sistema-de-login -  obs: colocar o nome da merge que estarei puxando as atualizações
git push - mandar para o servidor git


PULL REQUEST UM MERGE DEMOCRATICO:

Ex: Quando estou trablhando na minha branch de funcionalidade A e após acabar quero unir ela a minha branch principal B antes disso por pratica quando se trabalha em alguma empresa 
eu compartilho com outro programador que vai verificar esse código esse processo é chamado de (pull request) ,solcitação de aprovação.

SEQUENCIA PULL REQUEST:
git checkout sistema-de-login - entro na branch que será alterada e altero o código no arquivo
git add .
git commit -m "adicionado idade ao sistema de login"

para que esse código seja unido com a branch principal seguintes comandos:
git push - vai aparecer um comando pra copiar e colar 

APÓS ISSO VEM O PROCESSO DE PULL REQUEST :
<<<<<<< HEAD
-abra o git e clique no botão (Compare e pull request)
-compare: sistema-de-login para base:master
-titulo deixa o mesmo que foi alterado 
-deixe uma mensagem ex,adicionado o requisito de idade para que possa ser validado que o usuário é maior de idade ou não , e adicionado o cpf para comprovar que de fato é um usuário real.
-clique no botão (create pull request)

- quando tem pessoas para aprovar a pull request no git clica ao lado vai ter uma aba chamada (Reviews) são as pessoas que vão revisar o código, geralmente são uma ou duas.
essas pessoas podem aprovar ou não o código e caso seja reprovado faça as correções e envie um novo commit e não precisa abrir uma pull request nova , deixe um comentário marcando as pessoas que reprovou dizendo que foi feita as alterações solcitadas.

- quando só tem eu pra fazer o merge clico no botão (merge pull request) e (confirm merge) o botão vai ficar da cor roxa confirmando que os códigos já foram mergiados.
- só confirmar na branch master as alterações 


GIT IGNORE PARA QUE SERVE:

Supondo que eu tenha alguns arquivos na minha maquina e tenha alguns deles que eu não quero enviar para o meu sistema de versões , vamos dizer que eu crie uma nova pasta chamada (segredos) e dentro dela crio um arquivo de texto chamado senha e uma senha dentro 
se eu rodar o comando git status vai pedir para que esta pasta seja adicionada porém nesse caso eu não quero então digito o seguinte comando:

touch .gitignore

-sera criado na pasta um arquivo chamado gitignore, clico com o botão direito e abro com bloco de notas
-dentro dele vou definir quais pastas ou arquivos eu não quero que seja adicionado ao controle de versão , nesse caso digito (segredos/ e aperto ctrl+s) e fecho ou caso seja com fotos crie (fotos.png)
-git status no terminal vou perceber que ele não esta mais adicionando a pasta segredos e ele vai ignorar esta pasta.

Obs:importante que adicione o arquivo gitignore porque ele que controla o que sera escondido ou não.







































